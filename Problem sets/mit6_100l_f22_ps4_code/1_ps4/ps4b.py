# Problem Set 4B
# Name:
# Collaborators:

import random


class Message(object):
    def __init__(self, input_text):
        '''
        Initializes a Message object

        input_text (string): the message's text

        a Message object has one attribute:
            the message text
        '''
        self.message_text = input_text

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''Message('{self.get_text()}')'''

    def get_text(self):
        '''
        Used to access the message text outside of the class

        Returns: (string) the message text
        '''
        return self.message_text

    def shift_char(self, char: str, shift: int) -> str:
        '''
        Used to shift a character as described in the pset handout

        char (string): the single character to shift.
                    ASCII value in the range: 32<=ord(char)<=126
        shift (int): the amount to shift char by

        Returns: (string) the shifted character with ASCII value in the range [32, 126]
        '''
        ascii_bottom = 32
        ascii_top = 126
        value_char = ord(char)
        assert ascii_bottom <= value_char <= ascii_top, "Range for ascii are wrong"

        modulo = ascii_top - ascii_bottom + 1
        value_offset = value_char - ascii_bottom
        value_shifted = (value_offset + shift) % modulo #have to wrap around
        value_char_shifted = value_shifted + ascii_bottom

        shifted_char = chr(value_char_shifted)
        return shifted_char

    def apply_pad(self, pad: list[int]) -> str:
        '''
        Used to calculate the ciphertext produced by applying a one time pad to the message text.
        For each character in the text at index i shift that character by
            the amount specified by pad[i]

        pad (list of ints): a list of integers used to encrypt the message text
                        len(pad) == len(the message text)

        Returns: (string) The ciphertext produced using the one time pad
        '''
        cipher_text = ""
        # assert len(self.message_text) > len(pad), "pad is shorter than message_text"
        for i in range(len(self.message_text)):
            char = self.message_text[i]
            shift = pad[i]
            cipher_text += self.shift_char(char, shift)
        return cipher_text 


class PlaintextMessage(Message):
    def __init__(self, input_text, pad: list | None =None):
        '''
        Initializes a PlaintextMessage object.

        input_text (string): the message's text
        pad (list of ints OR None): the pad to encrypt the input_text or None if left empty
            if pad is not None then len(pad) == len(self.input_text)

        A PlaintextMessage object inherits from Message. It has three attributes:
            the message text
            the pad (list of integers, determined by pad
                or generated randomly using self.generate_pad() if pad is None)
            the ciphertext (string, input_text encrypted using the pad)
        '''
        super().__init__(input_text)
        if pad == None:
            self.pad = self.generate_pad()
        else:
            self.pad = pad.copy()
        self.cipher_text = self.apply_pad(self.pad)

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''PlaintextMessage('{self.get_text()}', {self.get_pad()})'''

    def generate_pad(self):
        '''
        Generates a one time pad which can be used to encrypt the message text.

        The pad should be generated by making a new list and for each character
            in the message chosing a random number in the range [0, 110) and
            adding that number to the list.

        Returns: (list of integers) the new one time pad
        '''
        pad = []
        for i in range(len(self.message_text)):
            pad.append(random.randint(0, 109))
        return pad


    def get_pad(self):
        '''
        Used to safely access your one time pad outside of the class

        Returns: (list of integers) a COPY of your pad
        '''
        return self.pad.copy()

    def get_ciphertext(self):
        '''
        Used to access the ciphertext produced by applying pad to the message text

        Returns: (string) the ciphertext
        '''
        return self.cipher_text

    def change_pad(self, new_pad):
        '''
        Changes the pad used to encrypt the message text and updates any other
        attributes that are determined by the pad.

        new_pad (list of ints): the new one time pad that should be associated with this message.
            len(new_pad) == len(the message text)

        Returns: nothing
        '''
        self.pad = new_pad.copy()
        self.cipher_text = self.apply_pad(self.pad)


class EncryptedMessage(Message):
    def __init__(self, input_text):
        '''
        Initializes an EncryptedMessage object

        input_text (string): the ciphertext of the message

        an EncryptedMessage object inherits from Message. It has one attribute:
            the message text (ciphertext)
        '''
        super().__init__(input_text)

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''EncryptedMessage('{self.get_text()}')'''

    def decrypt_message(self, pad):
        '''
        Decrypts the message text that was encrypted with pad as described in the writeup

        pad (list of ints): the new one time pad used to encrypt the message.
            len(pad) == len(the message text)

        Returns: (PlaintextMessage) the decrypted message (containing the pad)
        '''
        reverse_pad = [-i for i in pad]
        decrypt_message = self.apply_pad(reverse_pad)
        return PlaintextMessage(decrypt_message)

if __name__ == "__main__":
    message_text = " "
    myclass = Message(message_text)
    # print(f"get_text: {myclass.get_text()}")
    print(myclass.shift_char(" ", -1))
    print(ord("~"))